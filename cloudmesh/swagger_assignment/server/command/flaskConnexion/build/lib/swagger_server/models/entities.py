# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ENTITIES(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, host_name=None):  # noqa: E501
        """ENTITIES - a model defined in Swagger

        :param user_name: The user_name of this ENTITIES.  # noqa: E501
        :type user_name: str
        :param host_name: The host_name of this ENTITIES.  # noqa: E501
        :type host_name: str
        """
        self.swagger_types = {
            'user_name': str,
            'host_name': str
        }

        self.attribute_map = {
            'user_name': 'userName',
            'host_name': 'hostName'
        }

        self._user_name = user_name
        self._host_name = host_name

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ENTITIES of this ENTITIES.  # noqa: E501
        :rtype: ENTITIES
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self):
        """Gets the user_name of this ENTITIES.


        :return: The user_name of this ENTITIES.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ENTITIES.


        :param user_name: The user_name of this ENTITIES.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def host_name(self):
        """Gets the host_name of this ENTITIES.


        :return: The host_name of this ENTITIES.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ENTITIES.


        :param host_name: The host_name of this ENTITIES.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name
